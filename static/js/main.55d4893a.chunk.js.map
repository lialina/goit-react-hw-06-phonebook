{"version":3,"sources":["components/Container/Container.module.css","components/Filter/Filter.module.css","components/Container/Container.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","redux/types.js","redux/reducer.js","App.js","redux/store.js","index.js","components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css"],"names":["module","exports","Container","children","className","s","container","ContactForm","onSubmit","useState","name","setName","number","setNumber","nameInputId","shortid","generate","numberInputId","handleChange","event","currentTarget","value","reset","form","preventDefault","label","htmlFor","type","onChange","id","pattern","title","required","button","Filter","ContactList","contactsData","onDeleteContact","list","map","item","onClick","types","initialState","contacts","App","dispatch","useDispatch","setContacts","filter","setFilter","localStorageContacts","JSON","parse","localStorage","getItem","useEffect","window","setItem","stringify","getVisibleContacts","useMemo","normalizedFilter","toLowerCase","contact","includes","payload","find","presentContact","alert","contactId","filteredCont","store","createStore","state","devToolsEnhancer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,UAAY,+B,mBCA9BD,EAAOC,QAAU,CAAC,MAAQ,wB,2MCEX,SAASC,EAAT,GAAkC,IAAbC,EAAY,EAAZA,SAClC,OAAO,qBAAKC,UAAWC,IAAEC,UAAlB,SAA8BH,I,oBCAxB,SAASI,EAAT,GAAoC,IAAbC,EAAY,EAAZA,SACpC,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEMC,EAAcC,IAAQC,WACtBC,EAAgBF,IAAQC,WAaxBE,EAAe,SAAAC,GACc,SAA7BA,EAAMC,cAAcV,MACtBC,EAAQQ,EAAMC,cAAcC,OAGG,WAA7BF,EAAMC,cAAcV,MACtBG,EAAUM,EAAMC,cAAcC,QAI5BC,EAAQ,WACZX,EAAQ,IACRE,EAAU,KAGZ,OACE,uBAAMT,UAAWC,IAAEkB,KAAMf,SA3BN,SAAAW,GACnBA,EAAMK,iBAENhB,EAAS,CACPE,OACAE,WAGFU,KAmBA,UACE,wBAAOlB,UAAWC,IAAEoB,MAAOC,QAASZ,EAApC,iBACO,IACL,uBACEa,KAAK,OACLjB,KAAK,OACLW,MAAOX,EACPkB,SAAUV,EACVW,GAAIf,EACJgB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAGZ,wBAAO5B,UAAWC,IAAEoB,MAAOC,QAAST,EAApC,mBACS,IACP,uBACEU,KAAK,MACLjB,KAAK,SACLW,MAAOT,EACPgB,SAAUV,EACVW,GAAIZ,EACJa,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAIZ,wBAAQ5B,UAAWC,IAAE4B,OAAQN,KAAK,SAAlC,4B,qBC/DS,SAASO,EAAT,GAAsC,IAApBb,EAAmB,EAAnBA,MAAOO,EAAY,EAAZA,SACtC,OACE,wBAAOxB,UAAWC,IAAEoB,MAApB,kCAEE,uBAAOE,KAAK,OAAON,MAAOA,EAAOO,SAAUA,O,oBCDlC,SAASO,EAAT,GAAyD,IAAlCC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,gBAQlD,OACE,oBAAIjC,UAAWC,IAAEiC,KAAjB,SACGF,EAAaG,KAAI,gBAAGV,EAAH,EAAGA,GAAInB,EAAP,EAAOA,KAAME,EAAb,EAAaA,OAAb,OAChB,qBAAIR,UAAWC,IAAEmC,KAAjB,UACE,mBAAGpC,UAAWC,IAAEK,KAAhB,SAAuBA,IACvB,mBAAGN,UAAWC,IAAEO,OAAhB,SAAyBA,IACzB,wBAAQR,UAAWC,IAAE4B,OAAQQ,QAAS,kBAAMJ,EAAgBR,IAA5D,sBAH0BA,QCjB7B,IAAMa,EACE,wBCCFC,EAAe,CAC1BC,SAAU,CACR,CAAEf,GAAI,OAAQnB,KAAM,aAAcE,OAAQ,aAC1C,CAAEiB,GAAI,OAAQnB,KAAM,gBAAiBE,OAAQ,aAC7C,CAAEiB,GAAI,OAAQnB,KAAM,mBAAoBE,OAAQ,aAChD,CAAEiB,GAAI,OAAQnB,KAAM,gBAAiBE,OAAQ,eCKlC,SAASiC,IACtB,IAAMC,EAAWC,cAEjB,EAAgCtC,mBAASkC,EAAaC,UAAtD,mBAAOA,EAAP,KAAiBI,EAAjB,KACA,EAA4BvC,mBAAS,IAArC,mBAAOwC,EAAP,KAAeC,EAAf,KAEMC,EAAuBC,KAAKC,MAAMC,aAAaC,QAAQ,aAE7DC,qBAAU,WACJL,EACFH,EAAYG,GAGdM,OAAOH,aAAaI,QAAQ,WAAYN,KAAKO,UAAUf,MAEtD,IAEHY,qBAAU,WACRC,OAAOH,aAAaI,QAAQ,WAAYN,KAAKO,UAAUf,MACtD,CAACA,IAEJ,IA6BMgB,EAAqBC,mBAAQ,WACjC,IAAMC,EAAmBb,EAAOc,cAKhC,OAHsBnB,EAASK,QAAO,SAAAe,GAAO,OAC3CA,EAAQtD,KAAKqD,cAAcE,SAASH,QAGrC,CAAClB,EAAUK,IAEd,OACE,eAAC/C,EAAD,WACE,2CACA,cAACK,EAAD,CAAaC,SAzCE,SAAC,GAAsB,IAApBE,EAAmB,EAAnBA,KAAME,EAAa,EAAbA,OAC1BkC,EAAS,CACPnB,KAAM,aACNuC,QAAQ,uCAAMxD,GAASE,GAAhB,IAAwBiB,GAAId,IAAQC,eAG7C,IAAMgD,EAAU,CACdnC,GAAId,IAAQC,WACZN,OACAE,UAGEgC,EAASuB,MAAK,SAAAC,GAAc,OAAIA,EAAe1D,OAASsD,EAAQtD,QAClE2D,MAAM,GAAD,OAAIL,EAAQtD,KAAZ,6BAIPsC,EAAY,CAACgB,GAAF,mBAAcpB,QA0BvB,0CACA,cAACV,EAAD,CAAQb,MAAO4B,EAAQrB,SAnBN,SAAAT,GACnB+B,EAAU/B,EAAMC,cAAcC,UAoB5B,cAACc,EAAD,CACEC,aAAcwB,EACdvB,gBA5BgB,SAAAiC,GACpB,IAAMC,EAAe3B,EAASK,QAAO,SAAAe,GAAO,OAAIA,EAAQnC,KAAOyC,KAC/DtB,EAAYuB,S,0BCnDHC,EAAQC,uBFWU,WAA8C,IAA7CC,EAA4C,uDAApC/B,EAAoC,yCAApBhB,EAAoB,EAApBA,KAAMuC,EAAc,EAAdA,QAC5D,OAAQvC,IACDe,EACI,2BAAKgC,GAAZ,IAAmB9B,SAAS,GAAD,mBAAM8B,EAAM9B,UAAZ,CAAsBsB,MAE1CQ,IEhBqCC,8BCIlDC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJO,SAASC,eAAe,U,kBCb1BhF,EAAOC,QAAU,CAAC,KAAO,0BAA0B,KAAO,0BAA0B,KAAO,0BAA0B,OAAS,4BAA4B,OAAS,8B,kBCAnKD,EAAOC,QAAU,CAAC,KAAO,0BAA0B,MAAQ,2BAA2B,OAAS,+B","file":"static/js/main.55d4893a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__pnjcU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1717s\"};","import PropTypes from 'prop-types';\nimport s from './Container.module.css';\n\nexport default function Container({ children }) {\n  return <div className={s.container}>{children}</div>;\n}\n\nContainer.propTypes = {\n  children: PropTypes.array.isRequired,\n};","import { useState } from 'react';\nimport shortid from 'shortid';\nimport s from './ContactForm.module.css';\n\nexport default function ContactForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameInputId = shortid.generate();\n  const numberInputId = shortid.generate();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    onSubmit({\n      name,\n      number,\n    });\n\n    reset();\n  };\n\n  const handleChange = event => {\n    if (event.currentTarget.name === 'name') {\n      setName(event.currentTarget.value);\n    }\n\n    if (event.currentTarget.name === 'number') {\n      setNumber(event.currentTarget.value);\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <label className={s.label} htmlFor={nameInputId}>\n        Name{' '}\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          id={nameInputId}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label className={s.label} htmlFor={numberInputId}>\n        Number{' '}\n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          id={numberInputId}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n\n      <button className={s.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\n// class ContactForm extends Component {\n//   state = {\n//     name: \"\",\n//     number: \"\",\n//   };\n\n//   nameInputId = shortid.generate();\n//   numberInputId = shortid.generate();\n\n//   handleChange = (event) => {\n//     const { name, value } = event.currentTarget;\n\n//     this.setState({\n//       [name]: value,\n//     });\n//   };\n\n//   handleSubmit = (event) => {\n//     event.preventDefault();\n\n//     this.props.onSubmit({\n//       name: this.state.name,\n//       number: this.state.number,\n//     });\n\n//     this.reset();\n//   };\n\n//   reset = () => {\n//     this.setState({\n//       name: \"\",\n//       number: \"\",\n//     });\n//   };\n\n//   render() {\n// return (\n//   <form className={s.form} onSubmit={this.handleSubmit}>\n//     <label className={s.label} htmlFor={this.nameInputId}>\n//       Name{\" \"}\n//       <input\n//         type=\"text\"\n//         name=\"name\"\n//         value={this.state.name}\n//         onChange={this.handleChange}\n//         id={this.nameInputId}\n//         pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//         title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//         required\n//       />\n//     </label>\n//     <label className={s.label} htmlFor={this.numberInputId}>\n//       Number{\" \"}\n//       <input\n//         type=\"tel\"\n//         name=\"number\"\n//         value={this.state.number}\n//         onChange={this.handleChange}\n//         id={this.numberInputId}\n//         pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//         title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//         required\n//       />\n//     </label>\n\n//     <button className={s.button} type=\"submit\">\n//       Add contact\n//     </button>\n//   </form>\n// );\n//   }\n// }\n","import PropTypes from 'prop-types';\nimport s from './Filter.module.css';\n\nexport default function Filter({ value, onChange }) {\n  return (\n    <label className={s.label}>\n      Find contacts by name\n      <input type=\"text\" value={value} onChange={onChange} />\n    </label>\n  );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};","import PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\n\n// import { useSelector, useDispatch } from \"react-redux\";\n// import { deleteContact } from \"../../redux/actions\";\n\nexport default function ContactList({ contactsData, onDeleteContact }) {\n  // const { contacts } = useSelector((state) => state);\n  // const dispatch = useDispatch();\n\n  // const deleteContactClick = (id) => {\n  //   dispatch(deleteContact(id));\n  // }\n\n  return (\n    <ul className={s.list}>\n      {contactsData.map(({ id, name, number }) => (\n        <li className={s.item} key={id}>\n          <p className={s.name}>{name}</p>\n          <p className={s.number}>{number}</p>\n          <button className={s.button} onClick={() => onDeleteContact(id)}>\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  contactsData: PropTypes.array,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n","export const types = {\n  ADD_CONTACT: 'phoneBook/ADD_CONTACT',\n  DELETE_CONTACT: 'phoneBook/DELETE_CONTACT',\n};\n","import { types } from './types';\n\nexport const initialState = {\n  contacts: [\n    { id: 'id-1', name: 'Aria Stark', number: '459-12-56' },\n    { id: 'id-2', name: 'Paul Atreides', number: '443-89-12' },\n    { id: 'id-3', name: 'Hermione Granger', number: '645-17-79' },\n    { id: 'id-4', name: 'Frodo Baggins', number: '227-91-26' },\n  ],\n  // userName: '',\n  // phoneNumber: '',\n};\n\n// !!! Или switch, или handlers\n\nexport const contactsReducer = (state = initialState, { type, payload }) => {\n  switch (type) {\n    case types.ADD_CONTACT:\n      return { ...state, contacts: [...state.contacts, payload] };\n    default:\n      return state;\n  }\n};\n\n// const handlers = {\n//   [types.ADD_CONTACT]: (state, actions) => ({\n//     ...state,\n//     contacts: [...state.contacts, actions.payload],\n//   }),\n//   [types.DELETE_CONTACT]: (state, actions) => ({\n//     ...state,\n//     contacts: state.contacts.filter((contact) => contact.id !== actions.payload),\n//   }),\n//   DEFAULT: (state) => state,\n// };\n\n// export const phoneBook = (state = initialState, actions) => {\n//   const handler = handlers[actions.type] || handlers.DEFAULT;\n//   return handler(state, actions);\n// }\n","import { useState, useEffect, useMemo } from 'react';\nimport shortid from 'shortid';\nimport './App.css';\nimport Container from './components/Container/Container';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\n\nimport { useDispatch } from 'react-redux';\nimport { initialState } from './redux/reducer';\n// import { addContact } from './redux/actions';\n\nexport default function App() {\n  const dispatch = useDispatch();\n\n  const [contacts, setContacts] = useState(initialState.contacts);\n  const [filter, setFilter] = useState('');\n\n  const localStorageContacts = JSON.parse(localStorage.getItem('contacts'));\n\n  useEffect(() => {\n    if (localStorageContacts) {\n      setContacts(localStorageContacts);\n      return;\n    }\n    window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const addContact = ({ name, number }) => {\n    dispatch({\n      type: 'addContact',\n      payload: { ...name, ...number, id: shortid.generate() },\n    });\n\n    const contact = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n\n    if (contacts.find(presentContact => presentContact.name === contact.name)) {\n      alert(`${contact.name} is already in contacts.`);\n      return;\n    }\n\n    setContacts([contact, ...contacts]);\n  };\n\n  const deleteContact = contactId => {\n    const filteredCont = contacts.filter(contact => contact.id !== contactId);\n    setContacts(filteredCont);\n  };\n\n  const changeFilter = event => {\n    setFilter(event.currentTarget.value);\n  };\n\n  const getVisibleContacts = useMemo(() => {\n    const normalizedFilter = filter.toLowerCase();\n\n    let visibleContacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n    return visibleContacts;\n  }, [contacts, filter]);\n\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <ContactForm onSubmit={addContact} />\n\n      <h2>Contacts</h2>\n      <Filter value={filter} onChange={changeFilter} />\n\n      <ContactList\n        contactsData={getVisibleContacts}\n        onDeleteContact={deleteContact}\n      />\n    </Container>\n  );\n}\n\n// class App extends Component {\n//   state = {\n//     contacts: initialContacts,\n//     filter: \"\",\n//   };\n\n//   componentDidMount() {\n//     console.log(\"App componentDidMount\");\n\n//     const parsedContacts = JSON.parse(localStorage.getItem(\"contacts\"));\n\n//     console.log(parsedContacts);\n//     if (parsedContacts) {\n//       this.setState({ contacts: parsedContacts });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     console.log(\"Обновилось поле contacts, записываю contacts  в хранилище\");\n\n//     if (this.state.contacts !== prevState.contacts) {\n//       console.log(\"App componentDidUpdate\");\n\n//       localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n//   addContact = ({ name, number }) => {\n//     const contact = {\n//       id: shortid.generate(),\n//       name,\n//       number,\n//     };\n\n//     this.checkisContactAlreadyPresent(contact);\n//   };\n\n//   checkisContactAlreadyPresent = (contact) => {\n//     if (\n//       this.state.contacts.find(\n//         (presentContact) => presentContact.name === contact.name\n//       )\n//     ) {\n//       alert(`${contact.name} is already in contacts.`);\n//       return;\n//     }\n\n//     this.setState(({ contacts }) => ({\n//       contacts: [contact, ...contacts],\n//     }));\n//   };\n\n//   deleteContact = (contactId) => {\n//     this.setState((prevState) => ({\n//       contacts: prevState.contacts.filter(\n//         (contact) => contact.id !== contactId\n//       ),\n//     }));\n//   };\n\n//   changeFilter = (event) => {\n//     this.setState({ filter: event.currentTarget.value });\n//   };\n\n//   getVisibleContacts = () => {\n//     const { filter, contacts } = this.state;\n\n//     const normalizedFilter = filter.toLowerCase();\n\n//     return contacts.filter((contact) =>\n//       contact.name.toLowerCase().includes(normalizedFilter)\n//     );\n//   };\n\n//   render() {\n//     const { filter } = this.state;\n\n//     const visibleContacts = this.getVisibleContacts();\n\n//     return (\n//       <Container>\n//         <h1>Phonebook</h1>\n//         <ContactForm onSubmit={this.addContact} />\n\n//         <h2>Contacts</h2>\n//         <Filter value={filter} onChange={this.changeFilter} />\n\n//         <ContactList\n//           contacts={visibleContacts}\n//           onDeleteContact={this.deleteContact}\n//         />\n//       </Container>\n//     );\n//   }\n// }","import { createStore } from 'redux';\nimport { devToolsEnhancer } from 'redux-devtools-extension';\nimport { contactsReducer } from './reducer';\n\nexport const store = createStore(contactsReducer, devToolsEnhancer());\n// или phoneBook вместо contactsReducer после настройки handlers","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__ql-FI\",\"item\":\"ContactList_item__HD89u\",\"name\":\"ContactList_name__1Stit\",\"number\":\"ContactList_number__c45EH\",\"button\":\"ContactList_button__iO92e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2g1Iz\",\"label\":\"ContactForm_label__2H1OQ\",\"button\":\"ContactForm_button__29dm4\"};"],"sourceRoot":""}